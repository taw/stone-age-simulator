#!/usr/bin/env ruby

def food_production(gatherers)
  t1 = 10
  y1 = 3.0
  t2 = 30
  y2 = 1.0

  ut = (y2-y1) / (t2-t1)

  res = if gatherers <= t1
    gatherers * y1
  elsif gatherers <= t2
    # there's a better formula for this...
    (t1 * y1) +
    (t1+1..gatherers).map{|i| (y1+ut*(i-t1)) }.sum
  else
    (t1 * y1) +
    (t1+1..t2).map{|i| (y1+ut*(i-t1)) }.sum +
    (t2+1..gatherers).map{ y2 }.sum
  end

  res.round(6)
end

def debug_food_production
  (0..100).each do |i|
    p [i, food_production(i), (food_production(i) - food_production(i-1)).round(6)]
  end
end

# Simulation
gatherers = 2
1000.times do
  food = food_production(gatherers)
  need = gatherers * 2.0
  food_sat = (food / need).round(3)
  p(
    tribe: gatherers,
    food: food,
    need: need,
    food_sat: food_sat,
  )
  # 10% of getting extra pop
  if food_sat > 1.1
    gatherers += gatherers.times.count{ rand < 0.1 }
  # 1% of each pop dying for each 1% under food_sat
  elsif food_sat < 1.0
    gatherers -= gatherers.times.count{ rand < food_sat }
  end
end
