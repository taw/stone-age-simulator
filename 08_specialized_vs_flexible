#!/usr/bin/env ruby

require_relative "./yield_function"

class Region
  def initialize
    @gatherer_func = YieldFunction.new(20, 3.0, 40, 1.0)
    @hunter_func = YieldFunction.new(10, 5.0, 20, 1.0)
  end

  def yields(tribes)
    g_bonus = 0.8 + 0.4 * rand
    h_bonus = 0.8 + 0.4 * rand

    gatherer_yields = @gatherer_func.divide_yield(tribes.map(&:gatherer_work)).map{|x| x*g_bonus}
    hunter_yields = @hunter_func.divide_yield(tribes.map(&:hunter_work)).map{|x| x*h_bonus}
    gatherer_yields.zip(hunter_yields).map{|gi,hi| (gi+hi).round(6) }
  end
end

class Tribe
  attr_accessor :gatherers, :hunters, :food

  def initialize(g, h)
    @gatherers = g
    @hunters = h
  end

  def gatherer_work
    gatherers
  end

  def hunter_work
    hunters
  end

  def size
    hunters + gatherers
  end

  def food_need
    size * 2.0
  end

  def food_sat
    (food / food_need).round(3)
  end

  def simulate
    sat = food_sat
    if sat > 1.0
      @gatherers += @gatherers.times.count{ rand < 0.05 }
      @hunters += @hunters.times.count{ rand < 0.05 }
    # 1% of each pop dying for each 1% under food_sat
    elsif sat < 1.0
      @gatherers -= @gatherers.times.count{ rand > sat }
      @hunters -= @hunters.times.count{ rand > sat }
    end
  end

  def report
    puts "  #{self.class}<#{gatherers},#{hunters}> - #{food}/#{food_need.round(6)}"
  end
end

class HunterTribe < Tribe
  def hunter_work
    1.05 * super
  end
end

class GathererTribe < Tribe
  def gatherer_work
    1.05 * super
  end
end

class TinyTribe < Tribe
  def food_need
    0.95 * super
  end
end

region = Region.new

simulations = [
  [
    Tribe.new(20, 0),
    Tribe.new(10, 10),
    Tribe.new(0, 20),
  ],
  [
    GathererTribe.new(20, 0),
    Tribe.new(10, 10),
    Tribe.new(0, 20),
  ],
  [
    Tribe.new(20, 0),
    GathererTribe.new(10, 10),
    Tribe.new(0, 20),
  ],
  [
    Tribe.new(20, 0),
    HunterTribe.new(10, 10),
    Tribe.new(0, 20),
  ],
  [
    Tribe.new(20, 0),
    Tribe.new(10, 10),
    HunterTribe.new(0, 20),
  ],
  [
    TinyTribe.new(20, 0),
    Tribe.new(10, 10),
    Tribe.new(0, 20),
  ],
  [
    Tribe.new(20, 0),
    TinyTribe.new(10, 10),
    Tribe.new(0, 20),
  ],
  [
    Tribe.new(20, 0),
    Tribe.new(10, 10),
    TinyTribe.new(0, 20),
  ],
].each do |tribes|
  puts "Start:"
  tribes.each{|t| t.report}
  1000.times do
    food = region.yields(tribes)
    tribes.zip(food).each{|t,f| t.food = f}
    tribes.each{|t| t.simulate}
  end
  puts "End:"
  tribes.each{|t| t.report}
  puts ""
end
