#!/usr/bin/env ruby

require_relative "./yield_function"
require_relative "./random"

class Region
  def initialize
    @gatherer_func = YieldFunction.new(20, 3.0, 40, 1.0)
    @hunter_yields = YieldFunction.new(10, 5.0, 20, 1.0)
  end

  def yields(tribes)
    gatherer_yields = @gatherer_func.divide_yield(tribes.map(&:gatherer_work))
    hunter_yields = @hunter_yields.divide_yield(tribes.map(&:hunter_work))
    gatherer_yields.zip(hunter_yields).map{|gi,hi| (gi+hi).round(6) }
  end

  def assign_food(tribes)
    food = yields(tribes)
    tribes.zip(food).each{|t,f| t.food = f}
  end
end

class Tribe
  attr_accessor :food

  def initialize(g, h, c)
    @gatherers = g
    @hunters = h
    @children = c
  end

  def gatherer_work
    @gatherers
  end

  def hunter_work
    @hunters
  end

  def adults
    @hunters + @gatherers
  end

  def size
    @hunters + @gatherers + @children
  end

  # children eat less
  def food_need
    adults * 2.0 + @children * 1.0
  end

  def food_sat
    @food_sat ||= (food / food_need).round(3)
  end

  def simulate
    @food_sat = nil
    simulate_deaths
    simulate_maturity
    simulate_births
  end

  def simulate_deaths
    # 1% chance of death for every 4% chance of food deficiency
    # (so people survive average of 4 years with zero food)
    if food_sat < 1.0
      @gatherers -= random_events(@gatherers, (1-food_sat)/4.0)
      @hunters -= random_events(@hunters, (1-food_sat)/4.0)
    end
  end

  def simulate_maturity
    # 15 years, one round a year
    n = random_events(@children, 1.0/15.0)
    if size == 0
      ph = 0
    else
      ph = @hunters / adults.to_f
    end
    nh = random_events(n, ph)
    ng = n - nh
    @gatherers += ng
    @hunters += nh
    @children -= n
  end

  def simulate_births
    if food_sat >= 1.0
      @children += random_events(adults, 0.05)
    end
  end

  def report
    puts "  #{self.class}<#{@gatherers},#{@hunters},#{@children}> - #{food}/#{food_need.round(6)}"
  end
end

region = Region.new
tribes = [
  Tribe.new(20, 0, 0),
  Tribe.new(10, 10, 0),
  Tribe.new(0, 20, 0),
]

tribes.each{|t| t.report}
1000.times do
puts "Round:"
  region.assign_food(tribes)
  tribes.each{|t| t.simulate}
  tribes.each{|t| t.report}
end
