#!/usr/bin/env ruby

require_relative "./yield_function"

class Region
  def initialize
    @gatherer_func = YieldFunction.new(20, 3.0, 60, 0.5)
  end

  def food(tribe)
    @gatherer_func.call(tribe.work)
  end
end

class Tribe
  attr_accessor :food

  def initialize(*alive)
    # elderly, adult, children
    @alive = alive.dup
    @deaths = [0, 0, 0]
  end

  def work
    @alive[0] + @alive[1]
  end

  def food_need
    @alive.sum
  end

  def food_sat
    return 0 if food_need == 0
    (food / food_need).round(3)
  end

  def simulate
    sat = food_sat
    # Everyone gets one year older
    # So 1/15 advance to adult, 1/25 to elderly
    @alive[1].times do |i|
      if rand < (1.0 / 25.0)
        @alive[0] += 1
        @alive[1] -= 1
      end
    end
    @alive[2].times do |i|
      if rand < (1.0 / 15.0)
        @alive[1] += 1
        @alive[2] -= 1
      end
    end

    # Everyone is bigender for now
    # Ignore old man - young woman pairs
    fertile_women = (@alive[1] / 2)
    # 20% below sat people just stop having babies
    if sat >= 0.8
      # fertile women pregnant 50% of time
      @alive[2] += (0...fertile_women).count{ rand < 0.5 }
    end

    # Now kill some people
    deaths0 = @alive[0].times.count{ rand < death_chance(0, sat) }
    deaths1 = @alive[1].times.count{ rand < death_chance(1, sat) }
    deaths2 = @alive[2].times.count{ rand < death_chance(2, sat) }
    @deaths[0] += deaths0
    @deaths[1] += deaths1
    @deaths[2] += deaths2
    @alive[0] -= deaths0
    @alive[1] -= deaths1
    @alive[2] -= deaths2
  end

  def death_chance(age_group, sat)
    if sat < 0.5
      if age_group == 1
        0.5
      else
        0.9
      end
    elsif sat < 0.8
      if age_group == 1
        0.02
      else
        0.10
      end
    elsif sat < 1.0
      if age_group == 1
        0.01
      else
        0.05
      end
    else
      if age_group == 1
        0.0
      else
        0.02
      end
    end
  end

  def count_elderly
    @alive[0]
  end

  def count_adult
    @alive[1]
  end

  def count_children
    @alive[2]
  end

  def count_deaths_elderly
    @deaths[0]
  end

  def count_deaths_adult
    @deaths[1]
  end

  def count_deaths_children
    @deaths[2]
  end

  def report
    # puts "#{self.class}<#{@ages}> #{food}/#{food_need}"
    puts "#{self.class}<#{count_elderly}/#{count_adult}/#{count_children}> #{food}/#{food_need} (#{(100*food_sat).round}%)"
  end

  def report_deaths
    puts "Deaths: <#{count_deaths_elderly}/#{count_deaths_adult}/#{count_deaths_children}>"
  end
end

region = Region.new
# two pairs just in case someone dies too early
tribe = Tribe.new(0, 4, 0)

1000.times do
  tribe.food = region.food(tribe)
  tribe.report
  tribe.simulate
end
tribe.report_deaths
