#!/usr/bin/env ruby

require_relative "./yield_function"
require_relative "./random"

class Region
  attr_reader :gatherer_food, :hunter_food

  def initialize
    @gatherer_food = YieldFunction.new(100, 3.0, 200, 1.0)
    @hunter_food = YieldFunction.new(50, 5.0, 100, 1.0)
  end
end

class Tribe
  attr_accessor :food

  def initialize(children, jobs, job_choices, natural_causes)
    @children = children
    @jobs = jobs.dup
    @job_choices = job_choices.dup
    @natural_causes = natural_causes
  end

  def dogs
    # 1 dog trainer one can provide dogs for 5 hunters
    @jobs[2] * 5
  end

  def gatherer_work
    @jobs[0]
  end

  def hunter_work
    dog_bonus = [dogs, @jobs[1]].min
    @jobs[1] + dog_bonus
  end

  def adults
    @jobs.sum
  end

  def size
    @jobs.sum + @children
  end

  # children eat less
  def food_need
    adults * 2.0 + @children * 1.0 + dogs * 0.2
  end

  def food_sat
    return 0 unless food
    @food_sat ||= (food / food_need).round(3)
  end

  def simulate
    @food_sat = nil
    simulate_deaths
    simulate_maturity
    simulate_births
  end

  def simulate_deaths
    natural_causes = @natural_causes

    # 1% chance of death for every 4% chance of food deficiency
    # (so people survive average of 4 years with zero food)

    if food_sat < 1.0
      starvation = (1-food_sat)/4.0
    else
      starvation = 0.0
    end

    # Hunters have more dangerous job and extra 1% death rate
    @jobs.each_index do |i|
      accident = 0.0
      accident = 0.01 if i == 1 # hunters
      @jobs[i] -= Random.events(@jobs[i], natural_causes + starvation + accident)
    end
    @children -= Random.events(@children, natural_causes + starvation)
  end

  def simulate_maturity
    # 15 years, one round a year
    n = Random.events(@children, 1.0/15.0)
    @children -= n

    if adults == 0
      # only children survived, all adults dead, make them gatherer
      @jobs[0] += n
      return
    end

    n.times do
      i = Random.weighted_choice(@job_choices)
      redo if @jobs[i] == 0 # can't teach this
      @jobs[i] += 1
    end
  end

  def simulate_births
    if food_sat >= 1.0
      fertility = 0.05
    elsif food_sat >= 0.8
      # 0.05 down to 0.01
      fertility = (0.21 - food_sat/5.0).round(6)
    else
      fertility = 0.0
    end
    @children += Random.events(adults, fertility)
  end

  def report
    puts "  #{self.class}[#{@job_choices.join(",")}][#{@natural_causes}]<#{@jobs.join(',')};#{@children}> - #{(food||0).round(3)}/#{food_need.round(3)} (#{((food_sat||0.0)*100.0).round(2)}%)"
  end
end

class Simulation
  attr_reader :region, :tribes

  def initialize(region, tribes)
    @region = region
    @tribes = tribes
  end

  def simulate_round
    gatherer_food = region.gatherer_food.divide_yield(tribes.map(&:gatherer_work))
    hunter_food = region.hunter_food.divide_yield(tribes.map(&:hunter_work))
    tribes.zip(gatherer_food, hunter_food).each do |t, gf, hf|
      t.food = gf + hf
    end
    tribes.each{|t| t.simulate}
    tribes.each{|t| t.report if t.size > 0}
  end

  def call
    tribes.each{|t| t.report}
    2000.times do |i|
      puts "Round #{i+1}:"
      simulate_round
    end
  end
end

region = Region.new
tribes = [
  Tribe.new(0, [32, 10, 0], [0.8, 0.2, 0.0], 0.01),
  Tribe.new(0, [21, 21, 0], [0.5, 0.5, 0.0], 0.01),
  Tribe.new(0, [10, 32, 0], [0.2, 0.8, 0.0], 0.01),
  Tribe.new(0, [30, 10, 2], [0.8, 0.2, 0.04], 0.01),
  Tribe.new(0, [20, 20, 2], [0.5, 0.5, 0.10], 0.01),
  Tribe.new(0, [10, 30, 2], [0.2, 0.8, 0.16], 0.01),

  Tribe.new(0, [32, 10, 0], [0.8, 0.2, 0.0], 0.015),
  Tribe.new(0, [21, 21, 0], [0.5, 0.5, 0.0], 0.015),
  Tribe.new(0, [10, 32, 0], [0.2, 0.8, 0.0], 0.015),
  Tribe.new(0, [30, 10, 2], [0.8, 0.2, 0.04], 0.015),
  Tribe.new(0, [20, 20, 2], [0.5, 0.5, 0.10], 0.015),
  Tribe.new(0, [10, 30, 2], [0.2, 0.8, 0.16], 0.015),

  Tribe.new(0, [32, 10, 0], [0.8, 0.2, 0.0], 0.005),
  Tribe.new(0, [21, 21, 0], [0.5, 0.5, 0.0], 0.005),
  Tribe.new(0, [10, 32, 0], [0.2, 0.8, 0.0], 0.005),
  Tribe.new(0, [30, 10, 2], [0.8, 0.2, 0.04], 0.005),
  Tribe.new(0, [20, 20, 2], [0.5, 0.5, 0.10], 0.005),
  Tribe.new(0, [10, 30, 2], [0.2, 0.8, 0.16], 0.005),
]
Simulation.new(region, tribes).call
